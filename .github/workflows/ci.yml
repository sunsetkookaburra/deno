name: ci

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.kind }} ${{ matrix.config.os }} ${{ matrix.config.target }}
    if: |
      github.event_name == 'push' ||
      !startsWith(github.event.pull_request.head.label, 'denoland:')
    runs-on: ${{ matrix.config.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        config:
          #- os: macOS-latest
          #  kind: test_release
          #  target: x86_64-apple-darwin
          #- os: windows-2019
          #  kind: test_release
          #  target: x86_64-pc-windows-msvc
          #- os: ubuntu-16.04
          #  kind: test_release
          #  target: x86_64-unknown-linux-gnu
          - os: ubuntu-16.04
            kind: test_debug
            target: aarch64-unknown-linux-gnu
          #- os: ubuntu-16.04
          #  kind: test_debug
          #  target: x86_64-unknown-linux-gnu
          #- os: ubuntu-16.04
          #  kind: bench
          #  target: x86_64-unknown-linux-gnu
          #- os: ubuntu-16.04
          #  kind: lint

      # Always run master branch builds to completion. This allows the cache to
      # stay mostly up-to-date in situations where a single job fails due to
      # e.g. a flaky test.
      fail-fast:
        ${{ github.event_name != 'push' || github.ref != 'refs/heads/master' }}

    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: full

    steps:
      - name: Configure git
        run: git config --global core.symlinks true

      - name: Clone repository
        uses: actions/checkout@v1
        with:
          # Use depth > 1, because sometimes we need to rebuild master and if
          # other commits have landed it will become impossible to rebuild if
          # the checkout is too shallow.
          fetch-depth: 5
          submodules: true

      - name: Create source tarballs (release, linux)
        if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/') && github.repository == 'denoland/deno'
        run: |
          mkdir -p target/release
          tar --exclude=.cargo_home --exclude=".git*" --exclude=target --exclude=deno_typescript/typescript/tests --exclude=third_party/cpplint --exclude=third_party/node_modules --exclude=third_party/python_packages --exclude=third_party/prebuilt -czvf target/release/deno_src.tar.gz -C .. deno

      - name: Install rust
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: "1.43.0"

      - name: Install clippy and rustfmt
        if: matrix.config.kind == 'lint'
        run: |
          rustup component add clippy
          rustup component add rustfmt

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: "2.7"
          architecture: x64

      - name: Remove unused versions of Python
        if: startsWith(matrix.config.os, 'windows')
        run: |-
          $env:PATH -split ";" |
            Where-Object { Test-Path "$_\python.exe" } |
            Select-Object -Skip 1 |
            ForEach-Object { Move-Item "$_" "$_.disabled" }

      - name: Log versions
        run: |
          node -v
          python --version
          rustc --version
          cargo --version

      - name: Configure cargo data directory
        # After this point, all cargo registry and crate data is stored in
        # $GITHUB_WORKSPACE/.cargo_home. This allows us to cache only the files
        # that are needed during the build process. Additionally, this works
        # around a bug in the 'cache' action that causes directories outside of
        # the workspace dir to be saved/restored incorrectly.
        run: echo "::set-env name=CARGO_HOME::$(pwd)/.cargo_home"

      - name: Cache
        uses: actions/cache@master
        with:
          # Note: crates from the denoland/deno git repo always get rebuilt,
          # and their outputs ('deno', 'libdeno.rlib' etc.) are quite big,
          # so we cache only those subdirectories of target/{debug|release} that
          # contain the build output for crates that come from the registry.
          path: |-
            .cargo_home
            target/*/.*
            target/*/build
            target/*/deps
          key:
            ${{ matrix.config.os }}-${{ matrix.config.kind }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ matrix.config.os }}-${{ matrix.config.kind }}-

      #echo "::set-env name=CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_RUNNER::qemu-aarch64 -L /usr/aarch64-linux-gnu"
      - name: Install cross compilation toolchain
        if: matrix.config.target == 'aarch64-unknown-linux-gnu'
        run: |
          df
          sudo apt update
          sudo apt install -yq --no-install-suggests --no-install-recommends \
            libc6-arm64-cross \
            g++-5-aarch64-linux-gnu g++-5-multilib \
            gcc-5-aarch64-linux-gnu gcc-5-multilib
          sudo ln -s /usr/bin/aarch64-linux-gnu-gcc-5 \
                     /usr/bin/aarch64-linux-gnu-gcc
          sudo ln -s /usr/aarch64-linux-gnu/lib/ld-linux-aarch64.so.1 \
                     /lib/ld-linux-aarch64.so.1
          echo "::set-env name=CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER::/usr/bin/aarch64-linux-gnu-gcc-5"
          echo "::set-env name=CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_RUNNER::/home/runner/work/deno/deno/.cargo/aarch64_runner.sh"
          echo "::set-env name=CC_aarch64_unknown_linux_gnu::aarch64-linux-gnu-gcc"
          echo "::set-env name=CXX_aarch64_unknown_linux_gnu::aarch64-linux-gnu-g++"
          echo "::set-env name=CC::aarch64-linux-gnu-gcc"
          echo "::set-env name=CXX::aarch64-linux-gnu-g++"
          echo "::set-env name=RUST_TEST_THREADS::1"
          echo "::set-env name=V8_FROM_SOURCE::1"
          touch /home/runner/work/deno/deno/.cargo/aarch64_tests.txt
          chmod +x /home/runner/work/deno/deno/.cargo/aarch64_runner.sh
          rustup target add aarch64-unknown-linux-gnu

      - name: lint.py
        if: matrix.config.kind == 'lint'
        run: python ./tools/lint.py

      - name: test_format.py
        if: matrix.config.kind == 'lint'
        run: python ./tools/test_format.py

      - name: Build release
        if: (matrix.config.kind == 'test_release' || matrix.config.kind == 'bench') && matrix.config.target != 'aarch64-unknown-linux-gnu'
        run: cargo build --release --locked --all-targets

      - name: Build debug
        if: matrix.config.kind == 'test_debug' && matrix.config.target != 'aarch64-unknown-linux-gnu'
        run: cargo build --locked --all-targets

      - name: Test release
        if: matrix.config.kind == 'test_release' && matrix.config.target != 'aarch64-unknown-linux-gnu'
        run: cargo test --release --locked --all-targets

      - name: Test debug
        if: matrix.config.kind == 'test_debug' && matrix.config.target != 'aarch64-unknown-linux-gnu'
        run: cargo test --locked --all-targets

      - name: Build aarch64 release
        if: matrix.config.kind == 'test_release' && matrix.config.target == 'aarch64-unknown-linux-gnu'
        run: cargo build -vv --release --locked --all-targets --target aarch64-unknown-linux-gnu

      - name: Sample aarch64 build
        if: matrix.config.kind == 'test_release' && matrix.config.target == 'aarch64-unknown-linux-gnu'
        uses: actions/upload-artifact@v1
        with:
          name: deno-aarch64-unknown-linux-gnu
          path: target/aarch64-unknown-linux-gnu/release/deno

      - name: Build aarch64 debug
        if: matrix.config.kind == 'test_debug' && matrix.config.target == 'aarch64-unknown-linux-gnu'
        run: cargo build -vv --locked --all-targets --target aarch64-unknown-linux-gnu

      - name: Sample aarch64 debug
        if: matrix.config.kind == 'test_debug' && matrix.config.target == 'aarch64-unknown-linux-gnu'
        uses: actions/upload-artifact@v1
        with:
          name: deno-aarch64-unknown-linux-gnu
          path: target/aarch64-unknown-linux-gnu/debug/deno

      - name: Create release test file aarch64
        if: matrix.config.kind == 'test_release' && matrix.config.target == 'aarch64-unknown-linux-gnu'
        run: cargo test --release --locked --all-targets --target aarch64-unknown-linux-gnu

      - name: Create debug test file aarch64
        if: matrix.config.kind == 'test_debug' && matrix.config.target == 'aarch64-unknown-linux-gnu'
        run: |
          cargo test --locked --all-targets --target aarch64-unknown-linux-gnu
          df

      #- name: Run aarch64 tests
      #  if: matrix.config.target == 'aarch64-unknown-linux-gnu'
      #  uses: uraimo/run-on-arch-action@v1.0.8
      #  with:
      #    architecture: aarch64
      #    distribution: ubuntu16.04
      #    additionalArgs: -v /usr/bin:/hostbin -v /home/runner/work/deno/deno:/home/runner/work/deno/deno
      #    run: |
      #      PATH=/hostbin:$PATH
      #      ls -la
      #      ls -la /
      #      ./target/aarch64-unknown-linux-gnu/release/deno --version
      #      ./target/aarch64-unknown-linux-gnu/release/deno eval "console.log('Deno,,Hello,,World');"
      #      while read p; do $p; done < .cargo/aarch64_tests.txt

      - name: Run Benchmarks
        if: matrix.config.kind == 'bench'
        run: python ./tools/benchmark.py --release

      - name: Post Benchmarks
        if: matrix.config.kind == 'bench' && github.ref == 'refs/heads/master' && github.repository == 'denoland/deno'
        env:
          DENOBOT_PAT: ${{ secrets.DENOBOT_PAT }}
        run: |
          git clone --depth 1 -b gh-pages https://${DENOBOT_PAT}@github.com/denoland/benchmark_data.git gh-pages
          python ./tools/build_benchmark_jsons.py --release
          cd gh-pages
          git config user.email "propelml@gmail.com"
          git config user.name "denobot"
          git add .
          git commit --message "Update benchmarks"
          git push origin gh-pages

      - name: Worker info
        if: matrix.config.kind == 'bench'
        run: |
          cat /proc/cpuinfo
          cat /proc/meminfo

      - name: Pre-release (linux)
        if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.kind == 'test_release' && matrix.config.target != 'aarch64-unknown-linux-gnu'
        run: |
          cd target/release
          zip -r deno-x86_64-unknown-linux-gnu.zip deno
          ./deno types > lib.deno.d.ts

      - name: Pre-release (linux-aarch64)
        if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.kind == 'test_release' && matrix.config.target == 'aarch64-unknown-linux-gnu'
        run: |
          cd target/aarch64-unknown-linux-gnu/release
          zip -r deno-aarch64-unknown-linux-gnu.zip deno

      - name: Pre-release (mac)
        if: startsWith(matrix.config.os, 'macOS') && matrix.config.kind == 'test_release'
        run: |
          cd target/release
          zip -r deno-x86_64-apple-darwin.zip deno

      - name: Pre-release (windows)
        if: startsWith(matrix.config.os, 'windows') && matrix.config.kind == 'test_release'
        run: |
          Compress-Archive -CompressionLevel Optimal -Force -Path target/release/deno.exe -DestinationPath target/release/deno-x86_64-pc-windows-msvc.zip

      - name: Release
        uses: softprops/action-gh-release@v1
        if: matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/') && github.repository == 'denoland/deno'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            target/release/deno-x86_64-pc-windows-msvc.zip
            target/release/deno-x86_64-unknown-linux-gnu.zip
            target/release/deno-x86_64-apple-darwin.zip
            target/aarch64-unknown-linux-gnu/release/deno-aarch64-unknown-linux-gnu.zip
            target/release/deno_src.tar.gz
            target/release/lib.deno.d.ts
          draft: true

      - name: Publish
        if: >
          startsWith(github.ref, 'refs/tags/') &&
          github.repository == 'denoland/deno' &&
          matrix.config.kind == 'test_release' &&
          startsWith(matrix.config.os, 'ubuntu')
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cd core
          cargo publish
          cd ../deno_typescript
          sleep 30
          cargo publish
          cd ../cli
          sleep 30
          cargo publish
