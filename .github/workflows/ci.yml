name: ci

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.kind }} ${{ matrix.config.os }} ${{ matrix.config.target }}
    if: |
      github.event_name == 'push' ||
      !startsWith(github.event.pull_request.head.label, 'denoland:')
    runs-on: ${{ matrix.config.os }}
    timeout-minutes: 120
    strategy:
      matrix:
        config:
          #- os: macOS-latest
          #  kind: test_release
          #  target: x86_64-apple-darwin
          #- os: windows-2019
          #  kind: test_release
          #  target: x86_64-pc-windows-msvc
          #- os: ubuntu-16.04
          #  kind: test_release
          #  target: x86_64-unknown-linux-gnu
          - os: ubuntu-16.04
            kind: test_debug
            target: aarch64-unknown-linux-gnu
          #- os: ubuntu-16.04
          #  kind: test_debug
          #  target: x86_64-unknown-linux-gnu
          #- os: ubuntu-16.04
          #  kind: bench
          #  target: x86_64-unknown-linux-gnu
          #- os: ubuntu-16.04
          #  kind: lint

      # Always run master branch builds to completion. This allows the cache to
      # stay mostly up-to-date in situations where a single job fails due to
      # e.g. a flaky test.
      fail-fast:
        ${{ github.event_name != 'push' || github.ref != 'refs/heads/master' }}

    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: full

    steps:
      - name: Configure git
        run: git config --global core.symlinks true

      - name: Clone repository
        uses: actions/checkout@v1
        with:
          # Use depth > 1, because sometimes we need to rebuild master and if
          # other commits have landed it will become impossible to rebuild if
          # the checkout is too shallow.
          fetch-depth: 5
          submodules: true

      - name: Cache
        uses: actions/cache@master
        with:
          # Note: crates from the denoland/deno git repo always get rebuilt,
          # and their outputs ('deno', 'libdeno.rlib' etc.) are quite big,
          # so we cache only those subdirectories of target/{debug|release} that
          # contain the build output for crates that come from the registry.
          path: |-
            .cargo_home
            target/*/.*
            target/*/build
            target/*/deps
          key:
            ${{ matrix.config.os }}-${{ matrix.config.kind }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ matrix.config.os }}-${{ matrix.config.kind }}-

      - name: Build aarch64
        if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.kind == 'test_debug' && matrix.config.target == 'aarch64-unknown-linux-gnu'
        uses: uraimo/run-on-arch-action@master
        with:
          architecture: aarch64
          distribution: ubuntu16.04
          run: |
            export CARGO_INCREMENTAL=0
            export RUST_BACKTRACE=full
            export CARGO_HOME=$(pwd)/.cargo_home
            sudo dpkg --add-architecture arm64
            apt update
            apt install -yq --no-install-suggests --no-install-recommends python:arm64 curl:arm64
            mkdir curl-bin
            touch curl-bin/curl
            echo "#!/bin/sh" >> curl-bin/curl
            echo "curl -k $@" >> curl-bin/curl
            PATH=curl-bin:$PATH
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            PATH=$PATH:~/.cargo/bin
            cargo build --release --locked --all-targets

      #- name: Pre-release (linux-aarch64)
      #  if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.kind == 'test_release' && matrix.config.target == 'aarch64-unknown-linux-gnu'
      #  run: |
      #    cd target/aarch64-unknown-linux-gnu/release
      #    zip -r deno-aarch64-unknown-linux-gnu.zip deno

